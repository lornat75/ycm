#=============================================================================
# CMake - Cross Platform Makefile Generator
# Copyright 2000-2013 Kitware, Inc., Insight Software Consortium
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
import sys
import os
import re
import glob

sys.path.insert(0, r'@conf_path@')

source_suffix = '.rst'
master_doc = 'index'

project = 'YCM'
copyright = '@conf_copyright@'
version = '@conf_version@' # feature version
release = '@conf_release@' # full version string

primary_domain = 'cmake'

intersphinx_mapping = {'cmake': ('http://cmake.org/cmake/help/v3.0', '@conf_path@/cmake-objects.inv')}
extlinks = {'ycm-issue':('https://github.com/robotology/ycm/issues/%s', 'YCM issue #'),
            'ycm-commit':('https://github.com/robotology/ycm/commit/%s', ''),
            'cmake-issue': ('http://www.cmake.org/Bug/view.php?id=%s', 'CMake issue #'),
            'cmake-commit': ('http://cmake.org/gitweb?p=cmake.git;a=commitdiff;h=%s', '')}

exclude_patterns = []

todo_include_todos = True

extensions = ['cmake',
              'sphinx.ext.intersphinx',
              'sphinx.ext.extlinks',
              'sphinx.ext.todo']
templates_path = ['@conf_path@/templates']

ycm_manuals = sorted(glob.glob(r'@conf_docs@/manual/*.rst'))
ycm_manual_description = re.compile('^\.\. cmake-manual-description:(.*)$')
man_pages = []
for fpath in ycm_manuals:
    try:
        name, sec, rst = os.path.basename(fpath).split('.')
        desc = None
        f = open(fpath, 'r')
        for l in f:
            m = ycm_manual_description.match(l)
            if m:
                desc = m.group(1).strip()
                break
        f.close()
        if desc:
            man_pages.append(('manual/%s.%s' % (name, sec),
                              name, desc, [], int(sec)))
        else:
            sys.stderr.write("ERROR: No cmake-manual-description in '%s'\n" % fpath)
    except Exception as e:
        sys.stderr.write("ERROR: %s\n" % str(e))
man_show_urls = False

html_show_sourcelink = True
html_static_path = ['@conf_path@/static']
html_style = 'ycm.css'
html_theme = 'default'
html_theme_options = {
    "externalrefs": "true",
    "relbarbgcolor": "#b30",
    "sidebarwidth": "300"
}

html_title = 'YCM %s Documentation' % release
html_short_title = '%s Documentation' % release
html_favicon = 'ycm-favicon.ico'

rst_epilog = """
.. _`Buildyard`: https://github.com/Eyescale/Buildyard
.. _`CoDyCo Superbuild Repository`: https://github.com/robotology-playground/codyco-superbuild
.. _`CoDyCo`: http://codyco.eu/
.. _`ECM`: https://projects.kde.org/projects/kdesupport/extra-cmake-modules
.. _`Istituto Italiano di Tecnologia`: http://www.iit.it/
.. _`ROS Hydro`: http://wiki.ros.org/hydro
.. _`ROS`: http://ros.org/
.. _`WALK-MAN Superbuild Repository`: https://gitlab.robotology.eu/walkman/walkman
.. _`WALK-MAN`: http://walk-man.eu/
.. _`YARP Supported Distributions`: http://wiki.icub.org/wiki/YARP_Supported_Distributions
.. _`YARP`: http://www.yarp.it/
.. _`YCM Issue Tracker`: https://github.com/robotology/ycm/issues
.. _`catkin`: http://wiki.ros.org/catkin
.. _`iCub Facility`: http://www.iit.it/en/research/departments/icub-facility.html
.. _`qibuild`: https://community.aldebaran-robotics.com/doc/1-14/qibuild/index.html
.. _`rosbuild`: http://wiki.ros.org/rosbuild
.. |lock| image:: /images/lock.png
    :height: 12
    :width: 12
"""